# -*- coding: utf-8 -*-
"""wikipedia-traffic-prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B6JfLGu1rGRV5aL69OfJN2YvxkjPSdyR

# Time Series Data

We will be looking at page view data for the Wikipedia article for "Thanksgiving" seen [here](https://en.wikipedia.org/wiki/Thanksgiving).

We will be forecasting the number of page views for the "Thanksgiving" Wikipedia article in November, with the assistance of a time series model called **Prophet**.

### Prepare Data
"""

# Get the csv file (thanksgiving.csv)
! wget -nc https://storage.googleapis.com/penn-cis5450/thanksgiving.csv

# Read in the thanksgiving dataset
# Make sure that the "Date" column is of type date
thanksgiving_df = pd.read_csv('thanksgiving.csv')
thanksgiving_df['Date'] = pd.to_datetime(thanksgiving_df['Date'])

# Rename the "Date" column "ds" and the "Views" column "y"
# This is crucial for running the Prophet model
thanksgiving_df = thanksgiving_df.rename(columns={'Date': 'ds', 'Views': 'y'})

# Create thanksgiving_train and thanksgiving_test as defined above
thanksgiving_train = thanksgiving_df[thanksgiving_df['ds'] < pd.Timestamp('2022-11-01')].reset_index(drop=True)
thanksgiving_test =thanksgiving_df[thanksgiving_df['ds'] >= pd.Timestamp('2022-11-01')].reset_index(drop=True)

"""### Prophet Model

Prophet is a model developed by Facebook that is used for forecasting time series data, similar to ARIMA.

In this section we'll be exploring the Prophet model and comparing **two types of models**; one where you do not account for holidays (Thanksgiving is a U.S. holiday), and one where you do account for holidays.

#### Prophet Model (Base)
"""

# Create and fit a Prophet model on your training data.
m = Prophet().fit(thanksgiving_train)

# forecast the daily page view numbers for November 2022,
# save them to a dataframe called future_df
future = m.make_future_dataframe(periods=30)
forecast = m.predict(future)
future_df = forecast[['ds', 'yhat']]
future_df = future_df[future_df['ds'] >= pd.Timestamp('2022-11-01')].reset_index(drop=True)

"""Create a line plot that has both the **predicted (Prophet forecasting)** and **actual page views (from thanksgiving_test)** for November 2022."""

# Make a lineplot comparing the predicted page view numbers with the actual page view numbers
plt.figure(figsize=(4,3))
plt.plot(future_df['ds'], future_df['yhat'], label='Predicted', color='red')
plt.plot(thanksgiving_test['ds'], thanksgiving_test['y'], label='Actual', color='blue')

plt.title('Page Views for Thanksgiving Article (November 2022).')
plt.xticks(rotation=45)
plt.xlabel('Dates')
plt.ylabel('Number Visited')
plt.legend()

plt.show()

"""#### Prophet Model (Holiday)

As we saw in the previous section, the base model does a decent job at anticipating an increase in views as we get closer to Thanksgiving Day, but does a poor job of predicting a massive spike on the day itself. Let's see what happens when we rerun the Prophet model but allow the model to incorporate US holidays into its prediction.
"""

# Create and fit a Prophet model on your training data.
m = Prophet().add_country_holidays(country_name='US').fit(thanksgiving_train)

future_holiday = m.make_future_dataframe(periods=30)
forecast_holiday = m.predict(future_holiday)
future_holiday_df = forecast_holiday[['ds', 'yhat']]
future_holiday_df = future_holiday_df[future_holiday_df['ds'] >= pd.Timestamp('2022-11-01')].reset_index(drop=True)

"""Again, we create a line plot in matplotlib that has both the **predicted (Prophet forecasting)** and **actual page views (from thanksgiving_test)** for November 2022."""

plt.figure(figsize=(4,3))
plt.plot(future_holiday_df['ds'], future_holiday_df['yhat'], label='Predicted', color='red')
plt.plot(thanksgiving_test['ds'], thanksgiving_test['y'], label='Actual', color='blue')

plt.title('Page Views for Thanksgiving Article (November 2022).')
plt.xticks(rotation=45)
plt.xlabel('Dates')
plt.ylabel('Number Visited')
plt.legend()

plt.show()

"""**Much better!**"""